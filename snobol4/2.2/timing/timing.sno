*	$Id: timing.sno,v 1.52 2020-10-11 20:33:43 phil Exp $
*	process "xsnobol genc.sno" and "diff" output!

* keyword settings
	&ANCHOR = 1

* includes
-include 'host.sno'

* constants
	DIGIT = '0123456789'
	TAB = '	'
	SP = ' '

* keep time in 100ths (SHMULT * SNODIV == 1000)
	SHMULT = 10
	SNODIV = 100

* patterns
	INT = SPAN(DIGIT)
	FLOAT = INT '.' (INT | '') (('e' ANY('+-') INT) | '')
	WS = SPAN(SP TAB)
	DARK = BREAKX(SP TAB)
	NUM = FLOAT | INT

*	settings
* off 2020-10-11
	CHECK_TIMING =

****************************************************************
* functions

	DEFINE("CHECKHZ(FACT,REAL,USED)X,Y")		:(ECHECKHZ)
CHECKHZ	X = (REAL * 1000.0 / SNODIV) / (USED * SHMULT)
*	GET 10%
	Y = X / 10
*	BELOW BY MORE THAN 10%
	LT(FACT,X - Y)					:S(FRETURN)
*	ABOVE BY MORE THAN 10%
	GT(FACT,X + Y)					:S(FRETURN)
	OUTPUT = "used HZ=" USED ", should use " REAL '?' :(RETURN)
ECHECKHZ

****************

	DEFINE("FIX(F)")				:(EFIX)
FIX	FIX = CONVERT(F + 0.5, "INTEGER")		:(RETURN)
EFIX

****************

	DEFINE("PREC(IN)")				:(EPREC)
PREC	PREC = LT(REAL_BITS,64) IN			:S(RETURN)
	PREC = FIX(IN * 1000) / 1000.0			:(RETURN)
EPREC

****************************************************************
* print environmental stuff

	OUTPUT = 'DATE(2):' TAB TAB DATE(2)
	OUTPUT = 'HOST(HOST_SYSINFO):' TAB HOST(HOST_SYSINFO)
* config.guess value;
	OUTPUT = 'HOST(HOST_CONFIG_GUESS):' SP HOST(HOST_CONFIG_GUESS)
* configure options (will fail if null);
	OUTPUT = 'HOST(HOST_CONFIG_OPTIONS):' SP HOST(HOST_CONFIG_OPTIONS)

	OUTPUT = 'HOST(HOST_INTEGER_BITS):' SP HOST(HOST_INTEGER_BITS)
	REAL_BITS = HOST(HOST_REAL_BITS)
	OUTPUT = 'HOST(HOST_REAL_BITS):' TAB REAL_BITS
	OUTPUT = 'HOST(HOST_POINTER_BITS):' SP HOST(HOST_POINTER_BITS)
	OUTPUT = 'HOST(HOST_LONG_BITS):' TAB HOST(HOST_LONG_BITS)
	OUTPUT = 'HOST(HOST_DESCR_BITS):' TAB HOST(HOST_DESCR_BITS)
	OUTPUT = 'HOST(HOST_SPEC_BITS):' TAB HOST(HOST_SPEC_BITS)
	OUTPUT = 'HOST(HOST_DYNAMIC_SIZE):' SP HOST(HOST_DYNAMIC_SIZE)
	OUTPUT = 'HOST(HOST_PMSTACK_SIZE):' SP HOST(HOST_PMSTACK_SIZE)
	OUTPUT = 'HOST(HOST_ISTACK_SIZE):' SP HOST(HOST_ISTACK_SIZE)

****************************************************************
* parse snobol's messages

VLOP	LINE = INPUT					:F(NOVERS)
	LINE "The Macro Implementation of SNOBOL4" BREAKX("V") "Version "
+		REM . VERS				:F(VLOP)

	OUTPUT = 'Version:' TAB TAB VERS		:(CLOP)

NOVERS	TERMINAL = OUTPUT = "ERROR: could not find SNOBOL4 SIGNON/VERSION"
							:(FATAL)

* COMPILING
CLOP	LINE = INPUT					:F(NOCOMP)
	LINE 'No errors detected in source program'	:S(ELOP)
	LINE 'ERRORS DETECTED IN SOURCE PROGRAM'	:S(BADCOMP)F(CLOP)

NOCOMP	TERMINAL = OUTPUT = "ERROR: compilation interrupted?"	:(FATAL)
BADCOMP	TERMINAL = OUTPUT = "ERROR: compilation failed"		:(FATAL)

* EXECUTING
ELOP	LINE = INPUT					:F(NOEXEC)
	LINE 'Normal termination at level 0'		:S(GETSTAT)
	LINE 'Error ' INT				:S(BADEXEC)
	LINE 'Caught'					:S(BADEXEC)F(ELOP)

NOEXEC	TERMINAL = OUTPUT = "ERROR: genc.sno execution error"	:(FATAL)
BADEXEC	TERMINAL = OUTPUT = "ERROR: execution failed"
	OUTPUT = LINE					:(FATAL)

**************** here at end of normal execution

GETSTAT	LINE = INPUT					:F(NOSTAT)
	LINE 'SNOBOL4 statistics'			:F(GETSTAT)
	LINE = INPUT					:F(NOSTAT)
	LINE WS NUM . COMP WS 'ms. Compilation time'	:F(NOSTAT)
	LINE = INPUT					:F(NOSTAT)
	LINE WS NUM . EXEC WS 'ms. Execution time'	:F(NOSTAT)
	LINE = INPUT					:F(NOSTAT)
	LINE WS INT . STMTS WS 'Statements executed'	:F(NOSTAT)
	LINE = INPUT					:F(NOSTAT)
	LINE WS INT WS 'Arithmetic operations'		:F(NOSTAT)
	LINE = INPUT					:F(NOSTAT)
	LINE WS INT WS 'Pattern matches'		:F(NOSTAT)
	LINE = INPUT					:F(NOSTAT)
	LINE WS INT . GCS WS 'Regenerations'		:F(NOSTAT)
	LINE = INPUT					:F(NOSTAT)
	LINE WS NUM . GCTIME WS 'ms. Execution time in GC' :F(NOSTAT)

	OUTPUT = 'Compile time:' TAB TAB COMP ' milliseconds'
	OUTPUT = 'Execution time:' TAB TAB EXEC ' milliseconds'
	OUTPUT = 'Statements executed:' TAB STMTS
	OUTPUT = 'Garbage collections:' TAB GCS
	OUTPUT = 'GC time:' TAB TAB GCTIME ' milliseconds'

* beware dummy/mstime.c
	EQ(EXEC,0)					:S(NOET)
	OUTPUT = 'KStatements per second:' TAB PREC(STMTS / EXEC)

* calculate usec/stmt
	A1 = EXEC * 1000000.0 / STMTS

	OUTPUT = 'Nanoseconds per statement: ' PREC(A1)

* get SNOBOL time in 10ths
NOET	SNOBOL = (COMP + EXEC) / SNODIV

**************** get snobols's average ms/stmt

ALOP	LINE = INPUT					:F(NOSTAT)
	LINE WS NUM . AVG WS 'ns. Average'		:F(ALOP)
*	OUTPUT = '>>' LINE

* get usec/stmt (as calculated by snobol)
*	OUTPUT = 'AVG=' AVG
*	OUTPUT = 'A1=' A1

* compare A1 vs AVG (calculation fails on HP-PA using gcc?)
	EQ(A1,AVG)					:S(GETTIME)

* check for delta of +/-1us
	X = A1 - AVG
	LT(X,1)						:S(GETTIME)
	GT(X,-1)					:S(GETTIME)

* get ratio, keep our version on the bottom (less likely to be zero)
	X = 100 * AVG / A1
	X = FIX(X)
*	OUTPUT = 'X=' X

* ignore errors of less than 4% (difference between 49 and 50us)
	GE(X,98) LT(X,102)				:S(GETTIME)

	OUTPUT =
	OUTPUT = "WARNING: SNOBOL's calculated ms/stmt is suspect: " AVG
	WARNINGS = 1

****************************************************************
* deal with shell "time" output (but not on windoze)

GETTIME	HOST() BREAK(':') ':Win'			:S(DONE)
*	timing check disabled?
	IDENT(CHECK_TIMING)				:S(DONE)

GETTIME2
	LINE = INPUT					:F(NOTIME)
* NOTE: all of the following could be one pattern/match, 
* but kept seperate for sanity!!

	MIN = 0
* gnu time '0.00user ....'
	LINE NUM . USER 'user'				:S(GOTTIME)
* csh style time '0.00u ....'
	LINE NUM . USER 'u'				:S(GOTTIME)
* hpux 'user 0:0.00s'
	LINE 'user' WS INT . MIN ':' NUM . USER		:S(GOTTIME)
* hpux, aix 'user 0m0.00s'
* linux 'real    0m0.000s'
	LINE 'user' WS INT . MIN 'm' NUM . USER		:S(GOTTIME)
* hpux, aix, sunos5 'user 0.0'
	LINE 'user' WS NUM . USER			:S(GOTTIME)
* sunos4 "sh" time '.... 0.0 user ...'
	LINE DARK WS NUM . USER WS 'user'		:S(GOTTIME)
* aix4 'User 00.00'
	LINE 'User' WS NUM . USER			:S(GOTTIME)
* more here?

* detect flag line for next section;
	LINE '==== '					:F(GETTIME2)
	OUTPUT =
	OUTPUT = "WARNING: could not verify snobol4's cpu time measurements"
	OUTPUT = '	(look in timing.sno at GETTIME patterns)'
	OUTPUT =
	WARNINGS = 1					:(DIFFCK)

* here with shell runtime; merge minutes and seconds, convert to 100ths
GOTTIME	SHELL = (USER + MIN * 60.0) * SHMULT

*	OUTPUT = '>>' LINE
*	OUTPUT = 'USER=' USER
*	OUTPUT = 'MIN=' MIN
*	OUTPUT = 'SHELL=' SHELL
*	OUTPUT = 'SNOBOL=' SNOBOL

* see if shell time matches snobols exactly (unlikely with reals)
 	EQ(SNOBOL,SHELL)				:S(TIMEOK)

* quick and easy: allow +/-1
 	LT(SNOBOL,SHELL + 1)				:S(TIMEOK)
 	GT(SNOBOL,SHELL - 1)				:S(TIMEOK)

* avoid attempts to divide by zero!
	EQ(SHELL,0)					:S(NOTIME)

* allow +/-2.5% error; treating shell time as correct
	EPS = 0.025
	FACTOR = SNOBOL / (SHELL * 1.0)
	LT(FACTOR, 1 - EPS)				:S(BADTIME)
	GT(FACTOR, 1 + EPS)				:F(TIMEOK)

* here with bad time measurements
BADTIME	OUTPUT =
	OUTPUT = "WARNING: SNOBOL's timings off by factor of " FACTOR
	OUTPUT = "	see doc/porting.doc section on mstime.c"
	OUTPUT =
	OUTPUT = "shell time:" TAB SHELL
	OUTPUT = "snobol4 time:" TAB SNOBOL
	WARNINGS = 1

	CHECKHZ(FACTOR, 50, 60)				:S(DONE)
	CHECKHZ(FACTOR, 50, 100)			:S(DONE)
	CHECKHZ(FACTOR, 60, 50)				:S(DONE)
	CHECKHZ(FACTOR, 60, 100)			:S(DONE)
	CHECKHZ(FACTOR, 100, 50)			:S(DONE)
	CHECKHZ(FACTOR, 100, 60)			:S(DONE)

* nothing obvious -- say something?
							:(DONE)

* here with good time measurements
TIMEOK	OUTPUT =
	OUTPUT = "snobol4 time measurement checks out"	:(DONE)

* could not parse "snobol4" stats output; fatal
NOSTAT	OUTPUT =
	TERMINAL = OUTPUT = "ERROR: could not get stats" :(FATAL)

* could not get shell "time" output; nonfatal
NOTIME	OUTPUT =
	OUTPUT = "WARNING: could not get times"
	WARNINGS = 1
DONE	TERMINAL = DIFFER(WARNINGS) "NOTE! WARNINGs in timing.out"
	OUTPUT =					:(END)

FATAL	&CODE = 1
	TERMINAL = "NOTE!! ERRORs in timing.out"
END
